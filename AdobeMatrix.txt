#include <bits/stdc++.h>
using namespace std;

bool ifExists(int**layout,int n,int si,int ei,int finali,int finalj){
    if(si<0 || si>=n || ei<0 || ei>=n){
        return false;
    }
    if(layout[si][ei]==-1){
        return false;
    }
    if(layout[si][ei]==1){
        return true;
    }
    
    bool right = ifExists(layout,n, si,ei+1,finali,finalj);
    if(right){
        return true;
    }
    bool left = ifExists(layout,n,si+1,ei,finali,finalj);
    if(left){
        return true;
    }
    return false;
}

int maxCoins(int**layout,int n,int si,int ei, int finali,int finalj){
    if(si<0 || si>-n || ei<0 || ei>=n){
        return 0;
    }
    if(si==finali && ei==finalj){
        return 1;
    }
    if(layout[si][ei]==-1){
        return 0;
    }
    int right = layout[si][ei]+maxCoins(layout,n,si,ei+1,finali,finalj);
    int down = layout[si][ei]+maxCoins(layout,n,si+1,ei,finali,finalj);
    if(right>down){
        if(ei>=0 && ei<n && layout[si][ei+1]==1){
            layout[si][ei+1]=0;
        }
    }
    else{
        if(si>=0 && si<n && layout[si+1][ei]==1){
            layout[si+1][ei]=0;
        }
    }
    layout[si][ei]=0;
    return max(right,down);
    
}

int main()
{
    int ** layout =new int*[1000];
    for(int i=0;i<1000;i++){
        layout[i]=new int[1000];
    }
    int n,sum;
    cin >> n;
    for(int i=0;i<n;i++){
        for(int j=0;j<n;j++){
            cin >> layout[i][j];
        }
    }
    bool pathExists = ifExists(layout,n,0,0,n-1,n-1);
    if(!pathExists){
        cout << 0 << endl;
        return 0;
    }
    else{
        sum = maxCoins(layout,n,0,0,n-1,n-1);
        cout << sum <<endl;
        
    }
    for(int i=0;i<n;i++){
        for(int j=0;j<n;j++){
            cout << layout[i][j];
        }
        cout << endl;
    }
    
    
    
    return 0;
}

// Anmol Chugh
// IIITA
